0. INSTALAR DOCKER DESKTOP EN WINDOWS
	Docker Desktop
		Es una apicacion que facilita la gestion de contenedores docker en windows y macos



1. INSTALAR LOS CONTENEDORES DOCKER
	Ejecutar la configuracion de docker-compose.yaml
	>docker-compose up

	Docker compose
		Es una herramienta que facilita la definiciony despliegue de aplicaciones multi contenedor.
		Permite especificar la configuracion de los contenedores en un archivo YAML
		Existen alternativas a docker compose como: kubernetes, docker swarm

	Postgres	
		Es un sistema de gestion de base de datos relacional de codigo abierto y gratuito
	
	Debezium
		Es una herramienta que permite capturar los cambios en una base de datos y enviarlos a sistemas de mensajeria como kafka en tiempo real
		Es de codigo abierto
		Es un CDC (Change Data Capture)

	Kafka
		Es una plataforma de streaming de codigo abierto desarrollado por apache
		Util para la gestion de datos en tiempo real provenientes de distintas fuentes y enviarlos a multiples destinos
		Se utiliza para procesar y almacenar flujos masivos de datos en tiempo real

	Zookeeper
		Zookeeper es un servicio de coordinacion y gestion distribuida
		Es un servidor de codigo abierto que permite una coordinacion distribuida altamente confiable
		Es un coordinador centralizado que permite a diferentes partes de una aplicacion comunicarse y mantenerse organizada para trabajar juntas

	Schema-registry
		Es una herramienta que gestiona los esquemas de datos en un sistema distribuido
		Ayuda a garantizar la compatibilidad y el control de versiones de los esquemas de datos que se comparte entre diferentes aplicacioners
		Es un repositorio centralizado donde se gestionan los esquemas avro
		Es una plataforma independiente
		Serializadores: Avro, protobuf, json schema
		Las aplicaciones que producen y consumen datos pueden comunicarse con el schema registry para obtener la ultima version del esquema necesario
		El productor incluira en el evento una referencia al esquema. El consumidor a partir de la referencia que envio el productor puede recuperar el 		esquema actualizado del schema-registry
		Similar a un API managager, definen el contrato, listado de endpoints
		En el mundo de eventos, los esquemas son las APIs
				
	PgAdmin
		Es una herramienta grafica de codigo abierto que se utiliza para administrar y trabajar con bases de datos PostgreSQL.

	Kafkacat
		Es una herramienta de linea de comandos que se utiliza para interactuar con Apache Kafka.
		Es util para consumir y producir mensajes en temas de kafka directamente desde linea de comandos
		Permite especificar el formato para envio o mostrar ya sea en formato simple, json, avro, etc
	
				

2. PROBAR LOS CONTENEDORES INICIADOS
	Postgres 	[5432:5432]
	Debezium 	[8083:8083]
	Kafka 		[9092:9092]
	Zookeeper 	[2181]
	Schema-registry [8081:8081]
	PgAdmin 	[5050:80]
	Kafkacat	[0000:0000]

	Ver que los contenedores este corriendo
	>docker ps

	Ver la version del SO del contenedor
	>cat /etc/os-release

	Probar el servicio desde consola/navegador
	Postgres 	[5432:5432]
		>psql -U usuario_bd -d postgres -h localhost -p 5432

	Debezium 	[8083:8083]
		http://localhost:8083

	Kafka 		[9092:9092] (/usr/bin)
		>kafka-console-producer.sh --broker-list localhost:9092 --topic mi_tema
		>kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic mi_tema --from-beginning


	Zookeeper 	[2181] (/usr/bin)
		>zookeeper-shell.sh localhost:2181


	Schema-registry [8081:8081]
		http://localhost:8081

	PgAdmin 	[5050:80]
		http://localhost:5050

	Kafkacat	[0000:0000]
		>kafkacat -h //verifica la instalacion
		>echo "Este es un mensaje de prueba" | kafkacat -P -b localhost:9092 -t mi_tema
		>kafkacat -C -b localhost:9092 -t mi_tema

	
	
3. CONFIGURAR POSTGRES
	Crear la base de datos y tablas en postgres
		create table public.claims (claim_id integer, claim_date date, member_id integer, claim_status char(1));
		create table public.drugs (drug_id integer, drug_name char(30), drug_price decimal(9,3));
		create table public.member (member_id integer, member_name char(50), member_dob date);

	Habilitar la replicacion logical de las tablas
		alter table public.claims replica identity full;
		alter table public.drugs replica identity full;
		alter table public.member replica identity full;

	Mostrar las estadisticas de la replicacion
		select * from pg_catalog.pg_stat_replication 


4. CONFIGURAR DEBEZIUM
	Obtener la IP/nombre del contenedor postgres
	>docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' nombre_contenedor
	>hostname

	Agregar connector
	Agrear el conector de cdc-postres en debezium
		>curl -i -X POST -H "Accept:application/json" - H "Content-Type:application/json" 127.0.0.1:8083/connectors/ --data "@debezium.json"

	Tambien se puede agregar el conector mediante postman
		 POST: http://127.0.0.1:8083/connectors/
			Sincronizacion de las tablas claims, drugs
			Body: debezium.json 
				{
				  "name": "exampledb-connector",
				  "config": {
				    "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
				    "plugin.name": "pgoutput",
				    "database.hostname": "postgres",
				    "database.port": "5432",
				    "database.user": "docker",
				    "database.password": "docker",
				    "database.dbname": "exampledb",
				    "database.server.name": "postgres",
				    "table.include.list": "public.claims,public.drugs"
				  }
				}

			Sincronizacion de las tablas claims, drugs y member
			Body: debezium.json
				{
				  "name": "exampledb-connector",
				  "config": {
				    "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
				    "plugin.name": "pgoutput",
				    "database.hostname": "postgres",
				    "database.port": "5432",
				    "database.user": "docker",
				    "database.password": "docker",
				    "database.dbname": "exampledb",
				    "database.server.name": "postgres",
				    "table.include.list": "public.claims,public.drugs,public.member"
				  }
				}

	Eliminar conector
	curl -X DELETE http://localhost:8083/connectors/exampledb-connector


5. EJECUTAR KAFKACAT - COSUMIDORES
	Listar las redes disponibles Docker
		>docker network ls

	Ejecutar los contenedor kafkacat y levantar los consumidores 
		docker run --tty --network network_default confluentinc/cp-kafkacat kafkacat -b kafka:9092 -C -s key=s -s value=avro -r http://schema-registry:8081 -t postgres.public.claims
		docker run --tty --network network_default confluentinc/cp-kafkacat kafkacat -b kafka:9092 -C -s key=s -s value=avro -r http://schema-registry:8081 -t postgres.public.drugs
		docker run --tty --network network_default confluentinc/cp-kafkacat kafkacat -b kafka:9092 -C -s key=s -s value=avro -r http://schema-registry:8081 -t postgres.public.member


6. PRUEBAS CAPTURAS CDC EN TABLAS
	insert into public.claims values (1,'2023-01-01',1,'P');
	insert into public.drugs values (1,'Adderall',10);
	insert into public.member values (1,'Prasad','1990-01-01');

	insert into public.claims values (2,'2023-01-01',2,'P');
	insert into public.drugs values (2,'Adderall',10);
	insert into public.member values (2,'Prasad','1990-01-01');

	update public.claims set member_id=100 where claim_id=1;
	update public.drugs set drug_price=200 where drug_id=1;

	delete from public.claims where claim_id =1;
	delete from public.drugs  where drug_id =1;
	